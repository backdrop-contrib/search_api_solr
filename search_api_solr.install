<?php

/**
 * Implements hook_schema().
 */
function search_api_solr_schema() {
  // See, e.g., block_schema() for this trick. Seems to be the best way to get a
  // cache table definition.
  $schema['cache_search_api_solr'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_search_api_solr']['description'] = 'Cache table for the Search API Solr module to store various data related to Solr servers.';
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function search_api_solr_requirements($phase) {
  $ret = array();

  if ($phase == 'runtime') {
    $servers = search_api_server_load_multiple(FALSE, array('class' => 'search_api_solr_service', 'enabled' => TRUE));
    $count = 0;
    $unavailable = 0;
    $last = NULL;
    foreach ($servers as $server) {
      if (!$server->ping()) {
        ++$unavailable;
        $last = $server;
      }
      ++$count;
    }
    if (!$count) {
      return array();
    }
    $ret['search_api_solr'] = array(
      'title' => t('Solr servers'),
      'value' => format_plural($count, '1 server', '@count servers'),
    );
    if ($unavailable) {
      if ($unavailable == 1) {
        $ret['search_api_solr']['description'] = t('The Solr server of <a href="!url">%name</a> could not be reached.',
            array('!url' => url('admin/config/search/search_api/server/' . $last->machine_name), '%name' => $last->name));
      }
      else {
        $ret['search_api_solr']['description'] = t('@count Solr servers could not be reached.', array('@count' => $unavailable));
      }
      $ret['search_api_solr']['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $ret['search_api_solr']['description'] = format_plural($count, 'The Solr server could be reached.', 'All @count Solr servers could be reached.');
      $ret['search_api_solr']['severity'] = REQUIREMENT_OK;
    }
  }

  return $ret;
}

/**
 * Implements hook_uninstall().
 */
function search_api_solr_uninstall() {
  config_clear('search_api_solr.settings', 'search_api_solr_last_optimize');
  config_clear('search_api_solr.settings', 'search_api_solr_autocomplete_max_occurrences');
  config_clear('search_api_solr.settings', 'search_api_solr_index_prefix');
  config_clear('search_api_solr.settings', 'search_api_solr_http_get_max_length');
  config_clear('search_api_solr.settings', 'search_api_solr_cron_action');
  config_clear('search_api_solr.settings', 'search_api_solr_site_hash');
  config_clear('search_api_solr.settings', 'search_api_solr_connection_class');
  config_clear('search_api_solr.settings', 'search_api_solr_tasks');
  config_clear('search_api_solr.settings', 'search_api_solr_last_optimize');
  config_clear('search_api_solr.settings', 'search_api_solr_highlight_prefix');
}

/**
 * Implements hook_update_dependencies().
 */
function search_api_solr_update_dependencies() {
  // This update should run after primary IDs have been changed to machine names in the framework.
  $dependencies['search_api_solr'][7101] = array(
    'search_api' => 7102,
  );
  return $dependencies;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_solr_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function search_api_solr_update_7102() { }
